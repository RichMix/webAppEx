Flaw	Real-world Scenario

SQL injection	- Obtaining Active Directory usernames and performing a password spraying attack against a VPN or email portal.
File Inclusion - Reading source code to find a hidden page or directory which exposes additional functionality that can be used to gain remote code execution.
Unrestricted File Upload - A web application that allows a user to upload a profile picture that allows any file type to be uploaded (not just images). This can be leveraged to gain full control of the web application server by uploading malicious code.
Insecure Direct Object Referencing (IDOR)	- When combined with a flaw such as broken access control, this can often be used to access another user's files or functionality. An example would be editing your user profile browsing to a page such as /user/701/edit-profile. If we can change the 701 to 702, we may edit another user's profile!
Broken Access Control	- Another example is an application that allows a user to register a new account. If the account registration functionality is designed poorly, a user may perform privilege escalation when registering. Consider the POST request when registering a new user, which submits the data username=bjones&password=Welcome1&email=bjones@inlanefreight.local&roleid=3. 

What if we can manipulate the roleid parameter and change it to 0 or 1. 
We have seen real-world applications where this was the case, and it was possible to quickly register an admin user and access many unintended features of the web application.

The top 20 most common mistakes web developers make that are essential for us as penetration testers are:

No.	Mistake
1.	Permitting Invalid Data to Enter the Database
2.	Focusing on the System as a Whole
3.	Establishing Personally Developed Security Methods
4.	Treating Security to be Your Last Step
5.	Developing Plain Text Password Storage
6.	Creating Weak Passwords
7.	Storing Unencrypted Data in the Database
8.	Depending Excessively on the Client Side
9.	Being Too Optimistic
10.	Permitting Variables via the URL Path Name
11.	Trusting third-party code
12.	Hard-coding backdoor accounts
13.	Unverified SQL injections
14.	Remote file inclusions
15.	Insecure data handling
16.	Failing to encrypt data properly
17.	Not using a secure cryptographic system
18.	Ignoring layer 8
19.	Review user actions
20.	Web Application Firewall misconfigurations
These mistakes lead to the OWASP Top 10 vulnerabilities for web applications, which we will discuss in other modules:

No.	Vulnerability
1.	Broken Access Control
2.	Cryptographic Failures
3.	Injection
4.	Insecure Design
5.	Security Misconfiguration
6.	Vulnerable and Outdated Components
7.	Identification and Authentication Failures
8.	Software and Data Integrity Failures
9.	Security Logging and Monitoring Failures
10.	Server-Side Request Forgery (SSRF)
